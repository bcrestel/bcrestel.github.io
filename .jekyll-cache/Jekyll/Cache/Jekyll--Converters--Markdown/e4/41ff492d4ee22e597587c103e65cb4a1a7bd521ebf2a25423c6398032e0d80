I"¡<h1 id="how-to-install-in-docker">How to install in Docker</h1>
<p>I havenâ€™t found a way to install it via pipenv, so I added the following lines
directly to my Dockerfile</p>
<pre><code>RUN apt-get update &amp;&amp; apt-get install -y r-base
RUN pip install rpy2
</code></pre>
<p>Yes, donâ€™t forget to install R before installing <code>rpy2</code>.</p>

<h1 id="how-to-install-and-load-a-r-package">How to install and load a R package</h1>
<p>Default package should come with your R installation so that you can direclty
load them by doing</p>
<pre><code>my_r_package_loaded = rpackages.importr("my_r_package")
</code></pre>
<p>You can then use your loaded R package like a module. For instance,</p>
<pre><code>my_r_package_loaded.this_amazing_script(var1=1.0, var2='hello', var3=3.4)
</code></pre>

<p>But for specific packages, like here the <code>TOSTER</code> packace, you can do
this</p>
<pre><code>from rpy2 import robjects
import rpy2.robjects.packages as rpackages

utils = rpackages.importr('utils')
utils.chooseCRANmirror(ind=1)
utils.install_packages("TOSTER")
</code></pre>

<h1 id="how-to-run-a-r-script-in-a-notebook">How to run a R script in a notebook</h1>
<p>Given the script is in the same directory as your notebook, you can do</p>
<pre><code>import rpy2.robjects as robjects
r = robjects.r
r.source('my_first_r_script.r')
</code></pre>

<h1 id="how-to-plot-from-r-using-rpy2">How to plot from R using rpy2</h1>

<pre><code>import rpy2.robjects as robjects
from rpy2.robjects.lib import grdevices
from IPython.display import Image, display

with grdevices.render_to_bytesio(grdevices.jpeg, width=1024, height=896, res=150) as img:
    r.source('my_first_r_plot.r')
    
display(Image(data=img.getvalue(), format='jpeg', embed=True))
</code></pre>
<p>More on the plotting can be found in this demo
<a href="https://github.com/marsja/jupyter/blob/master/Rpy2%20and%20R%20plots%20in%20a%20Jupyter%20Notebook!.ipynb">notebook</a></p>
:ET