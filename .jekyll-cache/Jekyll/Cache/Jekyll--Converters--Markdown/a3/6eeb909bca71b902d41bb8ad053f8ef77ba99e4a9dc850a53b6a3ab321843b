I"L
<p>Poetry is a way to manage virtual environment in Python, a bit similar to
Anaconda.
The way it is being using in t-s is that there is a <code>pyproject.toml</code> file and a
lock file in the root of the repo, which means you can just <code>poetry install</code> to
create the virtualenv. By default, the “extras” dependencies will not be
installed. To install those, you instaed need to do <code>poetry install --extras "&lt;name of
package&gt;"</code>; this is equivalent to doing <code>poetry install</code> and on top of that
installing the extra dependencies requested.
When you update the version of certain dependencies, you can update you poetry
environment by doing <code>poetry install</code>.
To add new dependencies without modifying the <code>pyproject.toml</code>, you can do
<code>poetry add &lt;name_of_dependency&gt;</code>.</p>

<p>Once you’re all set up, you can run some commands inside your virtual
environment. For instance, to run <code>ipython</code>, you would do</p>
<pre><code>poetry run ipython
</code></pre>
<p>To start a jupyter notebook session, you would do</p>
<pre><code>poetry run jupyter-notebook
</code></pre>

<p>Their <a href="https://poetry.eustace.io/docs/cli/">documentation</a> is pretty good.</p>

<h1 id="how-to-add-a-dependency">How to add a dependency</h1>
<p>The first time you create a <code>pyproject.toml</code> file and you run <code>poetry install</code>,
poetry will resolve all the conflicts and save the version of each dependency in
a lock file, <code>poetry.lock</code>. You should version control both files.</p>

<p>If you want to add a new dependency, add it in the <code>poetry.toml</code> file then run
<code>poetry install</code>, which will update the lock file and commit both.</p>

<p>Because <code>poetry</code> resolves conflicts for you, you will not necessarily have, in
your lock file, the latest verison of all dependencies as requested in your
<code>pyproject.toml</code> file. If you want to update your dependencies, you need to run
<code>poetry update</code>, which will effectively delete your lock file and installing
again.</p>

<p>Note that sometimes, adding directly into the <code>pyproject.toml</code> file doesn’t work
(SolverProblemError…version solving failed) even though <code>poetry</code> should be
able to find it. The workaround (which is a
<a href="https://github.com/python-poetry/poetry/issues/1281">bug</a>) is to install that
dependency via <code>poetry add &lt;dependency&gt;</code>. This let <code>poetry</code> add that dependency
to the <code>.toml</code> file then resolves conflicts in the <code>.lock</code> file.</p>
:ET