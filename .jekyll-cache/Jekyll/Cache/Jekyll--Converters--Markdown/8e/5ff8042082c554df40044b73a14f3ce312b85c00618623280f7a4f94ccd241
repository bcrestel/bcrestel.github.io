I"p<h1 id="regularization">Regularization</h1>

<p>In <a href="https://arxiv.org/pdf/1710.10686.pdf">Regularization for Deep Learning: A
Taxonomy</a>, the authors list and classify a
large number of regularization techniques for DNN (as of October 2017).</p>

<p>One way Deep Learning avoids over-fitting is by building sparsity.
The former can be achieved with $L_1$ regularization, or with a post hoc
pruning, i.e., removing some neurons from the network after training is
complete. This pruning can be completely random, but most likely will be
targeted provided some sort of metric (magnitude of weights, gradient,…). In
<a href="https://openreview.net/pdf?id=HkghWScuoQ">Targeted Dropout</a>, the authors
observe that dropout also promote sparity (in the sense of small numbers of high
activations; see <a href="https://wiki.tum.de/display/lfdv/Dropout#Dropout-EffectonSparsity">here</a>), 
and they propose to dropout, with a
higher probability, neurons that would be pruned in the post-training stage.</p>

<p>Dropout typically doesn’t work as well for CNN. In <a href="http://papers.nips.cc/paper/8271-dropblock-a-regularization-method-for-convolutional-networks">DropBlock: A regularization method for convolutional networks
</a>,
the authors postulate that this is due to the spatial correlation between
neurons in a CNN, and propose to drop units in a spatially correlated manner
(DropBlock). They report better results.</p>

<p>A similar issue applied to LSTM-based networks, for which (traditional) dropout doesn’t work. In
<a href="https://arxiv.org/pdf/1409.2329.pdf">Recurrent neural network regularization</a>,
the authors introduce a modified way of applying dropout to network with LSTM
cells; the key is to apply dropout only to non-recurrent connections, i.e.,
connections between different layers of LSTM cells.</p>

<h1 id="optimization">Optimization</h1>

<p>In <a href="http://papers.nips.cc/paper/8186-adaptive-methods-for-nonconvex-optimization.pdf">Adaptive Methods for Nonconvex
Optimization</a>,
the authors study convergence properties of scaled gradient-based methods, and
highlight the benefit of gradually increasing the mini-batch size during
training.</p>

<h1 id="network-understanding">Network understanding</h1>

<p>In <a href="https://arxiv.org/pdf/1810.01075.pdf">Implicit Self-Regularization in Deep Neural
Networks</a>, the authors try to understand
why DNN work so well and do not overfit by applying ranomd matrix theory to the
eigenstructure of the last 2 layers of wide range of (fully connected) popular
networks. Their findings include:</p>
<ul>
  <li>DNN are self-regularizing</li>
  <li>self-regularize in different ways depending on whether it’s an old network
 (Tikhonov-like) or a more modern architecture (heaviy-tailed
self-regularization).</li>
  <li>connect batch size with self-regularzation properties (small batch-size are
 better self-regularizing).</li>
</ul>
:ET